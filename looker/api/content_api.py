# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from looker.api_client import ApiClient


class ContentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_content_metadata_accesss(self, **kwargs):  # noqa: E501
        """Get All Content Metadata Accesss  # noqa: E501

        ### All content metadata access records for a content metadata item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_content_metadata_accesss(async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata
        :param str fields: Requested fields.
        :return: list[ContentMetaGroupUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_content_metadata_accesss_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_content_metadata_accesss_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_content_metadata_accesss_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Content Metadata Accesss  # noqa: E501

        ### All content metadata access records for a content metadata item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_content_metadata_accesss_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata
        :param str fields: Requested fields.
        :return: list[ContentMetaGroupUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_metadata_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_content_metadata_accesss" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'content_metadata_id' in params:
            query_params.append(('content_metadata_id', params['content_metadata_id']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata_access', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentMetaGroupUser]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_content_metadatas(self, parent_id, **kwargs):  # noqa: E501
        """Get All Content Metadatas  # noqa: E501

        ### Get information about all content metadata in a space.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_content_metadatas(parent_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int parent_id: Parent space of content. (required)
        :param str fields: Requested fields.
        :return: list[ContentMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_content_metadatas_with_http_info(parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.all_content_metadatas_with_http_info(parent_id, **kwargs)  # noqa: E501
            return data

    def all_content_metadatas_with_http_info(self, parent_id, **kwargs):  # noqa: E501
        """Get All Content Metadatas  # noqa: E501

        ### Get information about all content metadata in a space.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_content_metadatas_with_http_info(parent_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int parent_id: Parent space of content. (required)
        :param str fields: Requested fields.
        :return: list[ContentMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_content_metadatas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent_id' is set
        if ('parent_id' not in params or
                params['parent_id'] is None):
            raise ValueError("Missing the required parameter `parent_id` when calling `all_content_metadatas`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parent_id', params['parent_id']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentMeta]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_favorite(self, content_favorite_id, **kwargs):  # noqa: E501
        """Get Favorite Content  # noqa: E501

        ### Get favorite content by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.content_favorite(content_favorite_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_favorite_id: Id of favorite content (required)
        :param str fields: Requested fields.
        :return: ContentFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.content_favorite_with_http_info(content_favorite_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_favorite_with_http_info(content_favorite_id, **kwargs)  # noqa: E501
            return data

    def content_favorite_with_http_info(self, content_favorite_id, **kwargs):  # noqa: E501
        """Get Favorite Content  # noqa: E501

        ### Get favorite content by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.content_favorite_with_http_info(content_favorite_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_favorite_id: Id of favorite content (required)
        :param str fields: Requested fields.
        :return: ContentFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_favorite_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_favorite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_favorite_id' is set
        if ('content_favorite_id' not in params or
                params['content_favorite_id'] is None):
            raise ValueError("Missing the required parameter `content_favorite_id` when calling `content_favorite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_favorite_id' in params:
            path_params['content_favorite_id'] = params['content_favorite_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_favorite/{content_favorite_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentFavorite',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_metadata(self, content_metadata_id, **kwargs):  # noqa: E501
        """Get Content Metadata  # noqa: E501

        ### Get information about an individual content metadata record.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.content_metadata(content_metadata_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata (required)
        :param str fields: Requested fields.
        :return: ContentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.content_metadata_with_http_info(content_metadata_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_metadata_with_http_info(content_metadata_id, **kwargs)  # noqa: E501
            return data

    def content_metadata_with_http_info(self, content_metadata_id, **kwargs):  # noqa: E501
        """Get Content Metadata  # noqa: E501

        ### Get information about an individual content metadata record.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.content_metadata_with_http_info(content_metadata_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata (required)
        :param str fields: Requested fields.
        :return: ContentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_metadata_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_metadata_id' is set
        if ('content_metadata_id' not in params or
                params['content_metadata_id'] is None):
            raise ValueError("Missing the required parameter `content_metadata_id` when calling `content_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_metadata_id' in params:
            path_params['content_metadata_id'] = params['content_metadata_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata/{content_metadata_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentMeta',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_content_favorite(self, **kwargs):  # noqa: E501
        """Create Favorite Content  # noqa: E501

        ### Create favorite content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_content_favorite(async=True)
        >>> result = thread.get()

        :param async bool
        :param ContentFavorite body: Favorite Content
        :return: ContentFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_content_favorite_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_content_favorite_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_content_favorite_with_http_info(self, **kwargs):  # noqa: E501
        """Create Favorite Content  # noqa: E501

        ### Create favorite content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_content_favorite_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param ContentFavorite body: Favorite Content
        :return: ContentFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_content_favorite" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_favorite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentFavorite',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_content_metadata_access(self, **kwargs):  # noqa: E501
        """Create Content Metadata Access  # noqa: E501

        ### Create content metadata access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_content_metadata_access(async=True)
        >>> result = thread.get()

        :param async bool
        :param ContentMetaGroupUser body: Content Metadata Access
        :return: ContentMetaGroupUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_content_metadata_access_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_content_metadata_access_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_content_metadata_access_with_http_info(self, **kwargs):  # noqa: E501
        """Create Content Metadata Access  # noqa: E501

        ### Create content metadata access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_content_metadata_access_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param ContentMetaGroupUser body: Content Metadata Access
        :return: ContentMetaGroupUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_content_metadata_access" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata_access', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentMetaGroupUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_content_favorite(self, content_favorite_id, **kwargs):  # noqa: E501
        """Delete Favorite Content  # noqa: E501

        ### Delete favorite content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content_favorite(content_favorite_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_favorite_id: Id of favorite content (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_content_favorite_with_http_info(content_favorite_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_content_favorite_with_http_info(content_favorite_id, **kwargs)  # noqa: E501
            return data

    def delete_content_favorite_with_http_info(self, content_favorite_id, **kwargs):  # noqa: E501
        """Delete Favorite Content  # noqa: E501

        ### Delete favorite content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content_favorite_with_http_info(content_favorite_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_favorite_id: Id of favorite content (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_favorite_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_favorite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_favorite_id' is set
        if ('content_favorite_id' not in params or
                params['content_favorite_id'] is None):
            raise ValueError("Missing the required parameter `content_favorite_id` when calling `delete_content_favorite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_favorite_id' in params:
            path_params['content_favorite_id'] = params['content_favorite_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_favorite/{content_favorite_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_content_metadata_access(self, content_metadata_access_id, **kwargs):  # noqa: E501
        """Delete Content Metadata Access  # noqa: E501

        ### Remove content metadata access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content_metadata_access(content_metadata_access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_access_id: Id of content metadata access (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_content_metadata_access_with_http_info(content_metadata_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_content_metadata_access_with_http_info(content_metadata_access_id, **kwargs)  # noqa: E501
            return data

    def delete_content_metadata_access_with_http_info(self, content_metadata_access_id, **kwargs):  # noqa: E501
        """Delete Content Metadata Access  # noqa: E501

        ### Remove content metadata access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content_metadata_access_with_http_info(content_metadata_access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_access_id: Id of content metadata access (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_metadata_access_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_metadata_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_metadata_access_id' is set
        if ('content_metadata_access_id' not in params or
                params['content_metadata_access_id'] is None):
            raise ValueError("Missing the required parameter `content_metadata_access_id` when calling `delete_content_metadata_access`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_metadata_access_id' in params:
            path_params['content_metadata_access_id'] = params['content_metadata_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata_access/{content_metadata_access_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_content_favorites(self, **kwargs):  # noqa: E501
        """Search Favorite Contents  # noqa: E501

        ### Search Favorite Content   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_content_favorites(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: Match User Id
        :param int limit: Number of results to return. (used with offset)
        :param int offset: Number of results to skip before returning any. (used with limit)
        :param str sorts: Fields to sort by.
        :param str fields: Requested fields.
        :return: list[ContentFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_content_favorites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_content_favorites_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_content_favorites_with_http_info(self, **kwargs):  # noqa: E501
        """Search Favorite Contents  # noqa: E501

        ### Search Favorite Content   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_content_favorites_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: Match User Id
        :param int limit: Number of results to return. (used with offset)
        :param int offset: Number of results to skip before returning any. (used with limit)
        :param str sorts: Fields to sort by.
        :param str fields: Requested fields.
        :return: list[ContentFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'limit', 'offset', 'sorts', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_content_favorites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sorts' in params:
            query_params.append(('sorts', params['sorts']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_favorite/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentFavorite]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_content_views(self, **kwargs):  # noqa: E501
        """Search Content Views  # noqa: E501

        ### Search Content View   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_content_views(async=True)
        >>> result = thread.get()

        :param async bool
        :param int view_count: Match view count
        :param int group_id: Match Group Id
        :param str look_id: Match look_id
        :param str dashboard_id: Match dashboard_id
        :param int content_metadata_id: Match content metadata id
        :param str start_of_week_date: Match start of week date
        :param bool all_time: True if only all time view records should be returned
        :param int user_id: Match user id
        :param int limit: Number of results to return. Use with `offset` to manage pagination of results
        :param int offset: Number of results to skip before returning data
        :param str sorts: Fields to sort by
        :param str fields: Requested fields.
        :return: list[ContentView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_content_views_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_content_views_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_content_views_with_http_info(self, **kwargs):  # noqa: E501
        """Search Content Views  # noqa: E501

        ### Search Content View   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_content_views_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int view_count: Match view count
        :param int group_id: Match Group Id
        :param str look_id: Match look_id
        :param str dashboard_id: Match dashboard_id
        :param int content_metadata_id: Match content metadata id
        :param str start_of_week_date: Match start of week date
        :param bool all_time: True if only all time view records should be returned
        :param int user_id: Match user id
        :param int limit: Number of results to return. Use with `offset` to manage pagination of results
        :param int offset: Number of results to skip before returning data
        :param str sorts: Fields to sort by
        :param str fields: Requested fields.
        :return: list[ContentView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_count', 'group_id', 'look_id', 'dashboard_id', 'content_metadata_id', 'start_of_week_date', 'all_time', 'user_id', 'limit', 'offset', 'sorts', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_content_views" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'view_count' in params:
            query_params.append(('view_count', params['view_count']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'look_id' in params:
            query_params.append(('look_id', params['look_id']))  # noqa: E501
        if 'dashboard_id' in params:
            query_params.append(('dashboard_id', params['dashboard_id']))  # noqa: E501
        if 'content_metadata_id' in params:
            query_params.append(('content_metadata_id', params['content_metadata_id']))  # noqa: E501
        if 'start_of_week_date' in params:
            query_params.append(('start_of_week_date', params['start_of_week_date']))  # noqa: E501
        if 'all_time' in params:
            query_params.append(('all_time', params['all_time']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sorts' in params:
            query_params.append(('sorts', params['sorts']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_view/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentView]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_content_metadata(self, content_metadata_id, body, **kwargs):  # noqa: E501
        """Update Content Metadata  # noqa: E501

        ### Move a piece of content.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_content_metadata(content_metadata_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata (required)
        :param ContentMeta body: Content Metadata (required)
        :return: ContentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_content_metadata_with_http_info(content_metadata_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_content_metadata_with_http_info(content_metadata_id, body, **kwargs)  # noqa: E501
            return data

    def update_content_metadata_with_http_info(self, content_metadata_id, body, **kwargs):  # noqa: E501
        """Update Content Metadata  # noqa: E501

        ### Move a piece of content.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_content_metadata_with_http_info(content_metadata_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_id: Id of content metadata (required)
        :param ContentMeta body: Content Metadata (required)
        :return: ContentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_metadata_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_content_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_metadata_id' is set
        if ('content_metadata_id' not in params or
                params['content_metadata_id'] is None):
            raise ValueError("Missing the required parameter `content_metadata_id` when calling `update_content_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_content_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_metadata_id' in params:
            path_params['content_metadata_id'] = params['content_metadata_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata/{content_metadata_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentMeta',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_content_metadata_access(self, content_metadata_access_id, body, **kwargs):  # noqa: E501
        """Update Content Metadata Access  # noqa: E501

        ### Update type of access for content metadata.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_content_metadata_access(content_metadata_access_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_access_id: Id of content metadata access (required)
        :param ContentMetaGroupUser body: Content Metadata Access (required)
        :return: ContentMetaGroupUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_content_metadata_access_with_http_info(content_metadata_access_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_content_metadata_access_with_http_info(content_metadata_access_id, body, **kwargs)  # noqa: E501
            return data

    def update_content_metadata_access_with_http_info(self, content_metadata_access_id, body, **kwargs):  # noqa: E501
        """Update Content Metadata Access  # noqa: E501

        ### Update type of access for content metadata.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_content_metadata_access_with_http_info(content_metadata_access_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_metadata_access_id: Id of content metadata access (required)
        :param ContentMetaGroupUser body: Content Metadata Access (required)
        :return: ContentMetaGroupUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_metadata_access_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_content_metadata_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_metadata_access_id' is set
        if ('content_metadata_access_id' not in params or
                params['content_metadata_access_id'] is None):
            raise ValueError("Missing the required parameter `content_metadata_access_id` when calling `update_content_metadata_access`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_content_metadata_access`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_metadata_access_id' in params:
            path_params['content_metadata_access_id'] = params['content_metadata_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/content_metadata_access/{content_metadata_access_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentMetaGroupUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
