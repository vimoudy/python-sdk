# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from looker.api_client import ApiClient


class HomepageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_homepage_items(self, **kwargs):  # noqa: E501
        """Get All Homepage Items  # noqa: E501

        ### Get information about all homepage items.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_homepage_items(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :param str homepage_section_id: Filter to a specific homepage section
        :return: list[HomepageItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_homepage_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_homepage_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_homepage_items_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Homepage Items  # noqa: E501

        ### Get information about all homepage items.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_homepage_items_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :param str homepage_section_id: Filter to a specific homepage section
        :return: list[HomepageItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sorts', 'homepage_section_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_homepage_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sorts' in params:
            query_params.append(('sorts', params['sorts']))  # noqa: E501
        if 'homepage_section_id' in params:
            query_params.append(('homepage_section_id', params['homepage_section_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HomepageItem]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_homepage_sections(self, **kwargs):  # noqa: E501
        """Get All Homepage sections  # noqa: E501

        ### Get information about all homepage sections.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_homepage_sections(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :return: list[HomepageSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_homepage_sections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_homepage_sections_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_homepage_sections_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Homepage sections  # noqa: E501

        ### Get information about all homepage sections.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_homepage_sections_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param str sorts: Fields to sort by.
        :return: list[HomepageSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sorts']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_homepage_sections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sorts' in params:
            query_params.append(('sorts', params['sorts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HomepageSection]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_homepage_item(self, **kwargs):  # noqa: E501
        """Create Homepage Item  # noqa: E501

        ### Create a new homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_homepage_item(async=True)
        >>> result = thread.get()

        :param async bool
        :param HomepageItem body: Homepage Item
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_homepage_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_homepage_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_homepage_item_with_http_info(self, **kwargs):  # noqa: E501
        """Create Homepage Item  # noqa: E501

        ### Create a new homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_homepage_item_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param HomepageItem body: Homepage Item
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_homepage_section(self, **kwargs):  # noqa: E501
        """Create Homepage section  # noqa: E501

        ### Create a new homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_homepage_section(async=True)
        >>> result = thread.get()

        :param async bool
        :param HomepageSection body: Homepage section
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_homepage_section_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_homepage_section_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_homepage_section_with_http_info(self, **kwargs):  # noqa: E501
        """Create Homepage section  # noqa: E501

        ### Create a new homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_homepage_section_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param HomepageSection body: Homepage section
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_sections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageSection',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_homepage_item(self, homepage_item_id, **kwargs):  # noqa: E501
        """Delete Homepage Item  # noqa: E501

        ### Delete a homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_homepage_item(homepage_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage_item (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_homepage_item_with_http_info(homepage_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_homepage_item_with_http_info(homepage_item_id, **kwargs)  # noqa: E501
            return data

    def delete_homepage_item_with_http_info(self, homepage_item_id, **kwargs):  # noqa: E501
        """Delete Homepage Item  # noqa: E501

        ### Delete a homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_homepage_item_with_http_info(homepage_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage_item (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params or
                params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `delete_homepage_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_items/{homepage_item_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_homepage_section(self, homepage_section_id, **kwargs):  # noqa: E501
        """Delete Homepage section  # noqa: E501

        ### Delete a homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_homepage_section(homepage_section_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage_section (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_homepage_section_with_http_info(homepage_section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_homepage_section_with_http_info(homepage_section_id, **kwargs)  # noqa: E501
            return data

    def delete_homepage_section_with_http_info(self, homepage_section_id, **kwargs):  # noqa: E501
        """Delete Homepage section  # noqa: E501

        ### Delete a homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_homepage_section_with_http_info(homepage_section_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage_section (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params or
                params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `delete_homepage_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_sections/{homepage_section_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def homepage_item(self, homepage_item_id, **kwargs):  # noqa: E501
        """Get Homepage Item  # noqa: E501

        ### Get information about a homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.homepage_item(homepage_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.homepage_item_with_http_info(homepage_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.homepage_item_with_http_info(homepage_item_id, **kwargs)  # noqa: E501
            return data

    def homepage_item_with_http_info(self, homepage_item_id, **kwargs):  # noqa: E501
        """Get Homepage Item  # noqa: E501

        ### Get information about a homepage item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.homepage_item_with_http_info(homepage_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params or
                params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `homepage_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_items/{homepage_item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def homepage_section(self, homepage_section_id, **kwargs):  # noqa: E501
        """Get Homepage section  # noqa: E501

        ### Get information about a homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.homepage_section(homepage_section_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.homepage_section_with_http_info(homepage_section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.homepage_section_with_http_info(homepage_section_id, **kwargs)  # noqa: E501
            return data

    def homepage_section_with_http_info(self, homepage_section_id, **kwargs):  # noqa: E501
        """Get Homepage section  # noqa: E501

        ### Get information about a homepage section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.homepage_section_with_http_info(homepage_section_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params or
                params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `homepage_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_sections/{homepage_section_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageSection',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_homepage_item(self, homepage_item_id, body, **kwargs):  # noqa: E501
        """Update Homepage Item  # noqa: E501

        ### Update a homepage item definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_homepage_item(homepage_item_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage item (required)
        :param HomepageItem body: Homepage Item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_homepage_item_with_http_info(homepage_item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_homepage_item_with_http_info(homepage_item_id, body, **kwargs)  # noqa: E501
            return data

    def update_homepage_item_with_http_info(self, homepage_item_id, body, **kwargs):  # noqa: E501
        """Update Homepage Item  # noqa: E501

        ### Update a homepage item definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_homepage_item_with_http_info(homepage_item_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_item_id: Id of homepage item (required)
        :param HomepageItem body: Homepage Item (required)
        :param str fields: Requested fields.
        :return: HomepageItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_item_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_homepage_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_item_id' is set
        if ('homepage_item_id' not in params or
                params['homepage_item_id'] is None):
            raise ValueError("Missing the required parameter `homepage_item_id` when calling `update_homepage_item`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_homepage_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_item_id' in params:
            path_params['homepage_item_id'] = params['homepage_item_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_items/{homepage_item_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_homepage_section(self, homepage_section_id, body, **kwargs):  # noqa: E501
        """Update Homepage section  # noqa: E501

        ### Update a homepage section definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_homepage_section(homepage_section_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage section (required)
        :param HomepageSection body: Homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_homepage_section_with_http_info(homepage_section_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_homepage_section_with_http_info(homepage_section_id, body, **kwargs)  # noqa: E501
            return data

    def update_homepage_section_with_http_info(self, homepage_section_id, body, **kwargs):  # noqa: E501
        """Update Homepage section  # noqa: E501

        ### Update a homepage section definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_homepage_section_with_http_info(homepage_section_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int homepage_section_id: Id of homepage section (required)
        :param HomepageSection body: Homepage section (required)
        :param str fields: Requested fields.
        :return: HomepageSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['homepage_section_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_homepage_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'homepage_section_id' is set
        if ('homepage_section_id' not in params or
                params['homepage_section_id'] is None):
            raise ValueError("Missing the required parameter `homepage_section_id` when calling `update_homepage_section`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_homepage_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'homepage_section_id' in params:
            path_params['homepage_section_id'] = params['homepage_section_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/homepage_sections/{homepage_section_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HomepageSection',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
