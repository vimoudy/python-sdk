# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DashboardFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'dashboard_id': 'str',
        'name': 'str',
        'title': 'str',
        'type': 'str',
        'default_value': 'str',
        'model': 'str',
        'explore': 'str',
        'dimension': 'str',
        'field': 'dict(str, str)',
        'row': 'int',
        'listens_to_filters': 'list[str]',
        'allow_multiple_values': 'bool',
        'required': 'bool',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'id': 'id',
        'dashboard_id': 'dashboard_id',
        'name': 'name',
        'title': 'title',
        'type': 'type',
        'default_value': 'default_value',
        'model': 'model',
        'explore': 'explore',
        'dimension': 'dimension',
        'field': 'field',
        'row': 'row',
        'listens_to_filters': 'listens_to_filters',
        'allow_multiple_values': 'allow_multiple_values',
        'required': 'required',
        'can': 'can'
    }

    def __init__(self, id=None, dashboard_id=None, name=None, title=None, type=None, default_value=None, model=None, explore=None, dimension=None, field=None, row=None, listens_to_filters=None, allow_multiple_values=None, required=None, can=None):  # noqa: E501
        """DashboardFilter - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._dashboard_id = None
        self._name = None
        self._title = None
        self._type = None
        self._default_value = None
        self._model = None
        self._explore = None
        self._dimension = None
        self._field = None
        self._row = None
        self._listens_to_filters = None
        self._allow_multiple_values = None
        self._required = None
        self._can = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        self.name = name
        self.title = title
        self.type = type
        if default_value is not None:
            self.default_value = default_value
        if model is not None:
            self.model = model
        if explore is not None:
            self.explore = explore
        if dimension is not None:
            self.dimension = dimension
        if field is not None:
            self.field = field
        if row is not None:
            self.row = row
        if listens_to_filters is not None:
            self.listens_to_filters = listens_to_filters
        if allow_multiple_values is not None:
            self.allow_multiple_values = allow_multiple_values
        if required is not None:
            self.required = required
        if can is not None:
            self.can = can

    @property
    def id(self):
        """Gets the id of this DashboardFilter.  # noqa: E501

        Unique Id  # noqa: E501

        :return: The id of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardFilter.

        Unique Id  # noqa: E501

        :param id: The id of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardFilter.  # noqa: E501

        Id of Dashboard  # noqa: E501

        :return: The dashboard_id of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardFilter.

        Id of Dashboard  # noqa: E501

        :param dashboard_id: The dashboard_id of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._dashboard_id = dashboard_id

    @property
    def name(self):
        """Gets the name of this DashboardFilter.  # noqa: E501

        Name of filter  # noqa: E501

        :return: The name of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardFilter.

        Name of filter  # noqa: E501

        :param name: The name of this DashboardFilter.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this DashboardFilter.  # noqa: E501

        Title of filter  # noqa: E501

        :return: The title of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardFilter.

        Title of filter  # noqa: E501

        :param title: The title of this DashboardFilter.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this DashboardFilter.  # noqa: E501

        Type of filter: one of date, number, string, or field  # noqa: E501

        :return: The type of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardFilter.

        Type of filter: one of date, number, string, or field  # noqa: E501

        :param type: The type of this DashboardFilter.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def default_value(self):
        """Gets the default_value of this DashboardFilter.  # noqa: E501

        Default value of filter  # noqa: E501

        :return: The default_value of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this DashboardFilter.

        Default value of filter  # noqa: E501

        :param default_value: The default_value of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def model(self):
        """Gets the model of this DashboardFilter.  # noqa: E501

        Model of filter (required if type = field)  # noqa: E501

        :return: The model of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DashboardFilter.

        Model of filter (required if type = field)  # noqa: E501

        :param model: The model of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def explore(self):
        """Gets the explore of this DashboardFilter.  # noqa: E501

        Explore of filter (required if type = field)  # noqa: E501

        :return: The explore of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._explore

    @explore.setter
    def explore(self, explore):
        """Sets the explore of this DashboardFilter.

        Explore of filter (required if type = field)  # noqa: E501

        :param explore: The explore of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._explore = explore

    @property
    def dimension(self):
        """Gets the dimension of this DashboardFilter.  # noqa: E501

        Dimension of filter (required if type = field)  # noqa: E501

        :return: The dimension of this DashboardFilter.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this DashboardFilter.

        Dimension of filter (required if type = field)  # noqa: E501

        :param dimension: The dimension of this DashboardFilter.  # noqa: E501
        :type: str
        """

        self._dimension = dimension

    @property
    def field(self):
        """Gets the field of this DashboardFilter.  # noqa: E501

        Field information  # noqa: E501

        :return: The field of this DashboardFilter.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this DashboardFilter.

        Field information  # noqa: E501

        :param field: The field of this DashboardFilter.  # noqa: E501
        :type: dict(str, str)
        """

        self._field = field

    @property
    def row(self):
        """Gets the row of this DashboardFilter.  # noqa: E501

        Display order of this filter relative to other filters  # noqa: E501

        :return: The row of this DashboardFilter.  # noqa: E501
        :rtype: int
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this DashboardFilter.

        Display order of this filter relative to other filters  # noqa: E501

        :param row: The row of this DashboardFilter.  # noqa: E501
        :type: int
        """

        self._row = row

    @property
    def listens_to_filters(self):
        """Gets the listens_to_filters of this DashboardFilter.  # noqa: E501

        Array of listeners for faceted filters  # noqa: E501

        :return: The listens_to_filters of this DashboardFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._listens_to_filters

    @listens_to_filters.setter
    def listens_to_filters(self, listens_to_filters):
        """Sets the listens_to_filters of this DashboardFilter.

        Array of listeners for faceted filters  # noqa: E501

        :param listens_to_filters: The listens_to_filters of this DashboardFilter.  # noqa: E501
        :type: list[str]
        """

        self._listens_to_filters = listens_to_filters

    @property
    def allow_multiple_values(self):
        """Gets the allow_multiple_values of this DashboardFilter.  # noqa: E501

        Whether the filter allows multiple filter values  # noqa: E501

        :return: The allow_multiple_values of this DashboardFilter.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_values

    @allow_multiple_values.setter
    def allow_multiple_values(self, allow_multiple_values):
        """Sets the allow_multiple_values of this DashboardFilter.

        Whether the filter allows multiple filter values  # noqa: E501

        :param allow_multiple_values: The allow_multiple_values of this DashboardFilter.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_values = allow_multiple_values

    @property
    def required(self):
        """Gets the required of this DashboardFilter.  # noqa: E501

        Whether the filter requires a value to run the dashboard  # noqa: E501

        :return: The required of this DashboardFilter.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this DashboardFilter.

        Whether the filter requires a value to run the dashboard  # noqa: E501

        :param required: The required of this DashboardFilter.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def can(self):
        """Gets the can of this DashboardFilter.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this DashboardFilter.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this DashboardFilter.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this DashboardFilter.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
