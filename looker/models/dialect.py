# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Dialect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'label': 'str',
        'supports_cost_estimate': 'bool',
        'supports_upload_tables': 'bool',
        'persistent_table_indexes': 'str',
        'persistent_table_sortkeys': 'str',
        'persistent_table_distkey': 'str',
        'supports_streaming': 'bool',
        'automatically_run_sql_runner_snippets': 'bool',
        'connection_tests': 'list[str]',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'name': 'name',
        'label': 'label',
        'supports_cost_estimate': 'supports_cost_estimate',
        'supports_upload_tables': 'supports_upload_tables',
        'persistent_table_indexes': 'persistent_table_indexes',
        'persistent_table_sortkeys': 'persistent_table_sortkeys',
        'persistent_table_distkey': 'persistent_table_distkey',
        'supports_streaming': 'supports_streaming',
        'automatically_run_sql_runner_snippets': 'automatically_run_sql_runner_snippets',
        'connection_tests': 'connection_tests',
        'can': 'can'
    }

    def __init__(self, name=None, label=None, supports_cost_estimate=None, supports_upload_tables=None, persistent_table_indexes=None, persistent_table_sortkeys=None, persistent_table_distkey=None, supports_streaming=None, automatically_run_sql_runner_snippets=None, connection_tests=None, can=None):  # noqa: E501
        """Dialect - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._label = None
        self._supports_cost_estimate = None
        self._supports_upload_tables = None
        self._persistent_table_indexes = None
        self._persistent_table_sortkeys = None
        self._persistent_table_distkey = None
        self._supports_streaming = None
        self._automatically_run_sql_runner_snippets = None
        self._connection_tests = None
        self._can = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if supports_cost_estimate is not None:
            self.supports_cost_estimate = supports_cost_estimate
        if supports_upload_tables is not None:
            self.supports_upload_tables = supports_upload_tables
        if persistent_table_indexes is not None:
            self.persistent_table_indexes = persistent_table_indexes
        if persistent_table_sortkeys is not None:
            self.persistent_table_sortkeys = persistent_table_sortkeys
        if persistent_table_distkey is not None:
            self.persistent_table_distkey = persistent_table_distkey
        if supports_streaming is not None:
            self.supports_streaming = supports_streaming
        if automatically_run_sql_runner_snippets is not None:
            self.automatically_run_sql_runner_snippets = automatically_run_sql_runner_snippets
        if connection_tests is not None:
            self.connection_tests = connection_tests
        if can is not None:
            self.can = can

    @property
    def name(self):
        """Gets the name of this Dialect.  # noqa: E501

        The name of the dialect  # noqa: E501

        :return: The name of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dialect.

        The name of the dialect  # noqa: E501

        :param name: The name of this Dialect.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this Dialect.  # noqa: E501

        The human-readable label of the connection  # noqa: E501

        :return: The label of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Dialect.

        The human-readable label of the connection  # noqa: E501

        :param label: The label of this Dialect.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def supports_cost_estimate(self):
        """Gets the supports_cost_estimate of this Dialect.  # noqa: E501

        Whether the dialect supports query cost estimates  # noqa: E501

        :return: The supports_cost_estimate of this Dialect.  # noqa: E501
        :rtype: bool
        """
        return self._supports_cost_estimate

    @supports_cost_estimate.setter
    def supports_cost_estimate(self, supports_cost_estimate):
        """Sets the supports_cost_estimate of this Dialect.

        Whether the dialect supports query cost estimates  # noqa: E501

        :param supports_cost_estimate: The supports_cost_estimate of this Dialect.  # noqa: E501
        :type: bool
        """

        self._supports_cost_estimate = supports_cost_estimate

    @property
    def supports_upload_tables(self):
        """Gets the supports_upload_tables of this Dialect.  # noqa: E501

        Whether the dialect supports uploading tables  # noqa: E501

        :return: The supports_upload_tables of this Dialect.  # noqa: E501
        :rtype: bool
        """
        return self._supports_upload_tables

    @supports_upload_tables.setter
    def supports_upload_tables(self, supports_upload_tables):
        """Sets the supports_upload_tables of this Dialect.

        Whether the dialect supports uploading tables  # noqa: E501

        :param supports_upload_tables: The supports_upload_tables of this Dialect.  # noqa: E501
        :type: bool
        """

        self._supports_upload_tables = supports_upload_tables

    @property
    def persistent_table_indexes(self):
        """Gets the persistent_table_indexes of this Dialect.  # noqa: E501

        PDT index columns  # noqa: E501

        :return: The persistent_table_indexes of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._persistent_table_indexes

    @persistent_table_indexes.setter
    def persistent_table_indexes(self, persistent_table_indexes):
        """Sets the persistent_table_indexes of this Dialect.

        PDT index columns  # noqa: E501

        :param persistent_table_indexes: The persistent_table_indexes of this Dialect.  # noqa: E501
        :type: str
        """

        self._persistent_table_indexes = persistent_table_indexes

    @property
    def persistent_table_sortkeys(self):
        """Gets the persistent_table_sortkeys of this Dialect.  # noqa: E501

        PDT sortkey columns  # noqa: E501

        :return: The persistent_table_sortkeys of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._persistent_table_sortkeys

    @persistent_table_sortkeys.setter
    def persistent_table_sortkeys(self, persistent_table_sortkeys):
        """Sets the persistent_table_sortkeys of this Dialect.

        PDT sortkey columns  # noqa: E501

        :param persistent_table_sortkeys: The persistent_table_sortkeys of this Dialect.  # noqa: E501
        :type: str
        """

        self._persistent_table_sortkeys = persistent_table_sortkeys

    @property
    def persistent_table_distkey(self):
        """Gets the persistent_table_distkey of this Dialect.  # noqa: E501

        PDT distkey column  # noqa: E501

        :return: The persistent_table_distkey of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._persistent_table_distkey

    @persistent_table_distkey.setter
    def persistent_table_distkey(self, persistent_table_distkey):
        """Sets the persistent_table_distkey of this Dialect.

        PDT distkey column  # noqa: E501

        :param persistent_table_distkey: The persistent_table_distkey of this Dialect.  # noqa: E501
        :type: str
        """

        self._persistent_table_distkey = persistent_table_distkey

    @property
    def supports_streaming(self):
        """Gets the supports_streaming of this Dialect.  # noqa: E501

        Suports streaming results  # noqa: E501

        :return: The supports_streaming of this Dialect.  # noqa: E501
        :rtype: bool
        """
        return self._supports_streaming

    @supports_streaming.setter
    def supports_streaming(self, supports_streaming):
        """Sets the supports_streaming of this Dialect.

        Suports streaming results  # noqa: E501

        :param supports_streaming: The supports_streaming of this Dialect.  # noqa: E501
        :type: bool
        """

        self._supports_streaming = supports_streaming

    @property
    def automatically_run_sql_runner_snippets(self):
        """Gets the automatically_run_sql_runner_snippets of this Dialect.  # noqa: E501

        Should SQL Runner snippets automatically be run  # noqa: E501

        :return: The automatically_run_sql_runner_snippets of this Dialect.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_run_sql_runner_snippets

    @automatically_run_sql_runner_snippets.setter
    def automatically_run_sql_runner_snippets(self, automatically_run_sql_runner_snippets):
        """Sets the automatically_run_sql_runner_snippets of this Dialect.

        Should SQL Runner snippets automatically be run  # noqa: E501

        :param automatically_run_sql_runner_snippets: The automatically_run_sql_runner_snippets of this Dialect.  # noqa: E501
        :type: bool
        """

        self._automatically_run_sql_runner_snippets = automatically_run_sql_runner_snippets

    @property
    def connection_tests(self):
        """Gets the connection_tests of this Dialect.  # noqa: E501

        Array of names of the tests that can be run on a connection using this dialect  # noqa: E501

        :return: The connection_tests of this Dialect.  # noqa: E501
        :rtype: list[str]
        """
        return self._connection_tests

    @connection_tests.setter
    def connection_tests(self, connection_tests):
        """Sets the connection_tests of this Dialect.

        Array of names of the tests that can be run on a connection using this dialect  # noqa: E501

        :param connection_tests: The connection_tests of this Dialect.  # noqa: E501
        :type: list[str]
        """

        self._connection_tests = connection_tests

    @property
    def can(self):
        """Gets the can of this Dialect.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this Dialect.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this Dialect.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this Dialect.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dialect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
