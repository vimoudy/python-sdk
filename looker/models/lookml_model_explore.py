# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker.models.lookml_model_explore_access_filter import LookmlModelExploreAccessFilter  # noqa: F401,E501
from looker.models.lookml_model_explore_alias import LookmlModelExploreAlias  # noqa: F401,E501
from looker.models.lookml_model_explore_always_filter import LookmlModelExploreAlwaysFilter  # noqa: F401,E501
from looker.models.lookml_model_explore_conditionally_filter import LookmlModelExploreConditionallyFilter  # noqa: F401,E501
from looker.models.lookml_model_explore_error import LookmlModelExploreError  # noqa: F401,E501
from looker.models.lookml_model_explore_fieldset import LookmlModelExploreFieldset  # noqa: F401,E501
from looker.models.lookml_model_explore_joins import LookmlModelExploreJoins  # noqa: F401,E501
from looker.models.lookml_model_explore_set import LookmlModelExploreSet  # noqa: F401,E501
from looker.models.lookml_model_explore_supported_measure_type import LookmlModelExploreSupportedMeasureType  # noqa: F401,E501


class LookmlModelExplore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'label': 'str',
        'scopes': 'list[str]',
        'can_total': 'bool',
        'can_save': 'bool',
        'can_explain': 'bool',
        'can_pivot_in_db': 'bool',
        'has_timezone_support': 'bool',
        'supports_cost_estimate': 'bool',
        'connection_name': 'str',
        'null_sort_treatment': 'str',
        'files': 'list[str]',
        'source_file': 'str',
        'project_name': 'str',
        'model_name': 'str',
        'view_name': 'str',
        'hidden': 'bool',
        'sql_table_name': 'str',
        'access_filter_fields': 'list[str]',
        'access_filters': 'list[LookmlModelExploreAccessFilter]',
        'aliases': 'list[LookmlModelExploreAlias]',
        'always_filter': 'list[LookmlModelExploreAlwaysFilter]',
        'conditionally_filter': 'list[LookmlModelExploreConditionallyFilter]',
        'index_fields': 'list[str]',
        'sets': 'list[LookmlModelExploreSet]',
        'errors': 'list[LookmlModelExploreError]',
        'fields': 'LookmlModelExploreFieldset',
        'joins': 'list[LookmlModelExploreJoins]',
        'group_label': 'str',
        'supported_measure_types': 'list[LookmlModelExploreSupportedMeasureType]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'label': 'label',
        'scopes': 'scopes',
        'can_total': 'can_total',
        'can_save': 'can_save',
        'can_explain': 'can_explain',
        'can_pivot_in_db': 'can_pivot_in_db',
        'has_timezone_support': 'has_timezone_support',
        'supports_cost_estimate': 'supports_cost_estimate',
        'connection_name': 'connection_name',
        'null_sort_treatment': 'null_sort_treatment',
        'files': 'files',
        'source_file': 'source_file',
        'project_name': 'project_name',
        'model_name': 'model_name',
        'view_name': 'view_name',
        'hidden': 'hidden',
        'sql_table_name': 'sql_table_name',
        'access_filter_fields': 'access_filter_fields',
        'access_filters': 'access_filters',
        'aliases': 'aliases',
        'always_filter': 'always_filter',
        'conditionally_filter': 'conditionally_filter',
        'index_fields': 'index_fields',
        'sets': 'sets',
        'errors': 'errors',
        'fields': 'fields',
        'joins': 'joins',
        'group_label': 'group_label',
        'supported_measure_types': 'supported_measure_types'
    }

    def __init__(self, id=None, name=None, description=None, label=None, scopes=None, can_total=None, can_save=None, can_explain=None, can_pivot_in_db=None, has_timezone_support=None, supports_cost_estimate=None, connection_name=None, null_sort_treatment=None, files=None, source_file=None, project_name=None, model_name=None, view_name=None, hidden=None, sql_table_name=None, access_filter_fields=None, access_filters=None, aliases=None, always_filter=None, conditionally_filter=None, index_fields=None, sets=None, errors=None, fields=None, joins=None, group_label=None, supported_measure_types=None):  # noqa: E501
        """LookmlModelExplore - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._label = None
        self._scopes = None
        self._can_total = None
        self._can_save = None
        self._can_explain = None
        self._can_pivot_in_db = None
        self._has_timezone_support = None
        self._supports_cost_estimate = None
        self._connection_name = None
        self._null_sort_treatment = None
        self._files = None
        self._source_file = None
        self._project_name = None
        self._model_name = None
        self._view_name = None
        self._hidden = None
        self._sql_table_name = None
        self._access_filter_fields = None
        self._access_filters = None
        self._aliases = None
        self._always_filter = None
        self._conditionally_filter = None
        self._index_fields = None
        self._sets = None
        self._errors = None
        self._fields = None
        self._joins = None
        self._group_label = None
        self._supported_measure_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if label is not None:
            self.label = label
        if scopes is not None:
            self.scopes = scopes
        if can_total is not None:
            self.can_total = can_total
        if can_save is not None:
            self.can_save = can_save
        if can_explain is not None:
            self.can_explain = can_explain
        if can_pivot_in_db is not None:
            self.can_pivot_in_db = can_pivot_in_db
        if has_timezone_support is not None:
            self.has_timezone_support = has_timezone_support
        if supports_cost_estimate is not None:
            self.supports_cost_estimate = supports_cost_estimate
        if connection_name is not None:
            self.connection_name = connection_name
        if null_sort_treatment is not None:
            self.null_sort_treatment = null_sort_treatment
        if files is not None:
            self.files = files
        if source_file is not None:
            self.source_file = source_file
        if project_name is not None:
            self.project_name = project_name
        if model_name is not None:
            self.model_name = model_name
        if view_name is not None:
            self.view_name = view_name
        if hidden is not None:
            self.hidden = hidden
        if sql_table_name is not None:
            self.sql_table_name = sql_table_name
        if access_filter_fields is not None:
            self.access_filter_fields = access_filter_fields
        if access_filters is not None:
            self.access_filters = access_filters
        if aliases is not None:
            self.aliases = aliases
        if always_filter is not None:
            self.always_filter = always_filter
        if conditionally_filter is not None:
            self.conditionally_filter = conditionally_filter
        if index_fields is not None:
            self.index_fields = index_fields
        if sets is not None:
            self.sets = sets
        if errors is not None:
            self.errors = errors
        if fields is not None:
            self.fields = fields
        if joins is not None:
            self.joins = joins
        if group_label is not None:
            self.group_label = group_label
        if supported_measure_types is not None:
            self.supported_measure_types = supported_measure_types

    @property
    def id(self):
        """Gets the id of this LookmlModelExplore.  # noqa: E501

        Fully qualified name model plus explore name  # noqa: E501

        :return: The id of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LookmlModelExplore.

        Fully qualified name model plus explore name  # noqa: E501

        :param id: The id of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LookmlModelExplore.  # noqa: E501

        Explore name  # noqa: E501

        :return: The name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LookmlModelExplore.

        Explore name  # noqa: E501

        :param name: The name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this LookmlModelExplore.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LookmlModelExplore.

        Description  # noqa: E501

        :param description: The description of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this LookmlModelExplore.  # noqa: E501

        Label  # noqa: E501

        :return: The label of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LookmlModelExplore.

        Label  # noqa: E501

        :param label: The label of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def scopes(self):
        """Gets the scopes of this LookmlModelExplore.  # noqa: E501

        Scopes  # noqa: E501

        :return: The scopes of this LookmlModelExplore.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this LookmlModelExplore.

        Scopes  # noqa: E501

        :param scopes: The scopes of this LookmlModelExplore.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def can_total(self):
        """Gets the can_total of this LookmlModelExplore.  # noqa: E501

        Can Total  # noqa: E501

        :return: The can_total of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._can_total

    @can_total.setter
    def can_total(self, can_total):
        """Sets the can_total of this LookmlModelExplore.

        Can Total  # noqa: E501

        :param can_total: The can_total of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._can_total = can_total

    @property
    def can_save(self):
        """Gets the can_save of this LookmlModelExplore.  # noqa: E501

        Can Save  # noqa: E501

        :return: The can_save of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._can_save

    @can_save.setter
    def can_save(self, can_save):
        """Sets the can_save of this LookmlModelExplore.

        Can Save  # noqa: E501

        :param can_save: The can_save of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._can_save = can_save

    @property
    def can_explain(self):
        """Gets the can_explain of this LookmlModelExplore.  # noqa: E501

        Can Explain  # noqa: E501

        :return: The can_explain of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._can_explain

    @can_explain.setter
    def can_explain(self, can_explain):
        """Sets the can_explain of this LookmlModelExplore.

        Can Explain  # noqa: E501

        :param can_explain: The can_explain of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._can_explain = can_explain

    @property
    def can_pivot_in_db(self):
        """Gets the can_pivot_in_db of this LookmlModelExplore.  # noqa: E501

        Can pivot in the DB  # noqa: E501

        :return: The can_pivot_in_db of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._can_pivot_in_db

    @can_pivot_in_db.setter
    def can_pivot_in_db(self, can_pivot_in_db):
        """Sets the can_pivot_in_db of this LookmlModelExplore.

        Can pivot in the DB  # noqa: E501

        :param can_pivot_in_db: The can_pivot_in_db of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._can_pivot_in_db = can_pivot_in_db

    @property
    def has_timezone_support(self):
        """Gets the has_timezone_support of this LookmlModelExplore.  # noqa: E501

        Has timezone support  # noqa: E501

        :return: The has_timezone_support of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._has_timezone_support

    @has_timezone_support.setter
    def has_timezone_support(self, has_timezone_support):
        """Sets the has_timezone_support of this LookmlModelExplore.

        Has timezone support  # noqa: E501

        :param has_timezone_support: The has_timezone_support of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._has_timezone_support = has_timezone_support

    @property
    def supports_cost_estimate(self):
        """Gets the supports_cost_estimate of this LookmlModelExplore.  # noqa: E501

        Cost estimates supported  # noqa: E501

        :return: The supports_cost_estimate of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._supports_cost_estimate

    @supports_cost_estimate.setter
    def supports_cost_estimate(self, supports_cost_estimate):
        """Sets the supports_cost_estimate of this LookmlModelExplore.

        Cost estimates supported  # noqa: E501

        :param supports_cost_estimate: The supports_cost_estimate of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._supports_cost_estimate = supports_cost_estimate

    @property
    def connection_name(self):
        """Gets the connection_name of this LookmlModelExplore.  # noqa: E501

        Connection name  # noqa: E501

        :return: The connection_name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this LookmlModelExplore.

        Connection name  # noqa: E501

        :param connection_name: The connection_name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._connection_name = connection_name

    @property
    def null_sort_treatment(self):
        """Gets the null_sort_treatment of this LookmlModelExplore.  # noqa: E501

        How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"  # noqa: E501

        :return: The null_sort_treatment of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._null_sort_treatment

    @null_sort_treatment.setter
    def null_sort_treatment(self, null_sort_treatment):
        """Sets the null_sort_treatment of this LookmlModelExplore.

        How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"  # noqa: E501

        :param null_sort_treatment: The null_sort_treatment of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._null_sort_treatment = null_sort_treatment

    @property
    def files(self):
        """Gets the files of this LookmlModelExplore.  # noqa: E501

        List of model source files  # noqa: E501

        :return: The files of this LookmlModelExplore.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this LookmlModelExplore.

        List of model source files  # noqa: E501

        :param files: The files of this LookmlModelExplore.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def source_file(self):
        """Gets the source_file of this LookmlModelExplore.  # noqa: E501

        Primary source_file file  # noqa: E501

        :return: The source_file of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._source_file

    @source_file.setter
    def source_file(self, source_file):
        """Sets the source_file of this LookmlModelExplore.

        Primary source_file file  # noqa: E501

        :param source_file: The source_file of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._source_file = source_file

    @property
    def project_name(self):
        """Gets the project_name of this LookmlModelExplore.  # noqa: E501

        Name of project  # noqa: E501

        :return: The project_name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this LookmlModelExplore.

        Name of project  # noqa: E501

        :param project_name: The project_name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def model_name(self):
        """Gets the model_name of this LookmlModelExplore.  # noqa: E501

        Name of model  # noqa: E501

        :return: The model_name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this LookmlModelExplore.

        Name of model  # noqa: E501

        :param model_name: The model_name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def view_name(self):
        """Gets the view_name of this LookmlModelExplore.  # noqa: E501

        Name of view  # noqa: E501

        :return: The view_name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this LookmlModelExplore.

        Name of view  # noqa: E501

        :param view_name: The view_name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def hidden(self):
        """Gets the hidden of this LookmlModelExplore.  # noqa: E501

        Is hidden  # noqa: E501

        :return: The hidden of this LookmlModelExplore.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this LookmlModelExplore.

        Is hidden  # noqa: E501

        :param hidden: The hidden of this LookmlModelExplore.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def sql_table_name(self):
        """Gets the sql_table_name of this LookmlModelExplore.  # noqa: E501

        A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.  # noqa: E501

        :return: The sql_table_name of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._sql_table_name

    @sql_table_name.setter
    def sql_table_name(self, sql_table_name):
        """Sets the sql_table_name of this LookmlModelExplore.

        A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.  # noqa: E501

        :param sql_table_name: The sql_table_name of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._sql_table_name = sql_table_name

    @property
    def access_filter_fields(self):
        """Gets the access_filter_fields of this LookmlModelExplore.  # noqa: E501

        (DEPRECATED) Array of access filter field names  # noqa: E501

        :return: The access_filter_fields of this LookmlModelExplore.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_filter_fields

    @access_filter_fields.setter
    def access_filter_fields(self, access_filter_fields):
        """Sets the access_filter_fields of this LookmlModelExplore.

        (DEPRECATED) Array of access filter field names  # noqa: E501

        :param access_filter_fields: The access_filter_fields of this LookmlModelExplore.  # noqa: E501
        :type: list[str]
        """

        self._access_filter_fields = access_filter_fields

    @property
    def access_filters(self):
        """Gets the access_filters of this LookmlModelExplore.  # noqa: E501

        Access filters  # noqa: E501

        :return: The access_filters of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreAccessFilter]
        """
        return self._access_filters

    @access_filters.setter
    def access_filters(self, access_filters):
        """Sets the access_filters of this LookmlModelExplore.

        Access filters  # noqa: E501

        :param access_filters: The access_filters of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreAccessFilter]
        """

        self._access_filters = access_filters

    @property
    def aliases(self):
        """Gets the aliases of this LookmlModelExplore.  # noqa: E501

        Aliases  # noqa: E501

        :return: The aliases of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreAlias]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this LookmlModelExplore.

        Aliases  # noqa: E501

        :param aliases: The aliases of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreAlias]
        """

        self._aliases = aliases

    @property
    def always_filter(self):
        """Gets the always_filter of this LookmlModelExplore.  # noqa: E501

        Always filter  # noqa: E501

        :return: The always_filter of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreAlwaysFilter]
        """
        return self._always_filter

    @always_filter.setter
    def always_filter(self, always_filter):
        """Sets the always_filter of this LookmlModelExplore.

        Always filter  # noqa: E501

        :param always_filter: The always_filter of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreAlwaysFilter]
        """

        self._always_filter = always_filter

    @property
    def conditionally_filter(self):
        """Gets the conditionally_filter of this LookmlModelExplore.  # noqa: E501

        Conditionally filter  # noqa: E501

        :return: The conditionally_filter of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreConditionallyFilter]
        """
        return self._conditionally_filter

    @conditionally_filter.setter
    def conditionally_filter(self, conditionally_filter):
        """Sets the conditionally_filter of this LookmlModelExplore.

        Conditionally filter  # noqa: E501

        :param conditionally_filter: The conditionally_filter of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreConditionallyFilter]
        """

        self._conditionally_filter = conditionally_filter

    @property
    def index_fields(self):
        """Gets the index_fields of this LookmlModelExplore.  # noqa: E501

        Array of index fields  # noqa: E501

        :return: The index_fields of this LookmlModelExplore.  # noqa: E501
        :rtype: list[str]
        """
        return self._index_fields

    @index_fields.setter
    def index_fields(self, index_fields):
        """Sets the index_fields of this LookmlModelExplore.

        Array of index fields  # noqa: E501

        :param index_fields: The index_fields of this LookmlModelExplore.  # noqa: E501
        :type: list[str]
        """

        self._index_fields = index_fields

    @property
    def sets(self):
        """Gets the sets of this LookmlModelExplore.  # noqa: E501

        Sets  # noqa: E501

        :return: The sets of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreSet]
        """
        return self._sets

    @sets.setter
    def sets(self, sets):
        """Sets the sets of this LookmlModelExplore.

        Sets  # noqa: E501

        :param sets: The sets of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreSet]
        """

        self._sets = sets

    @property
    def errors(self):
        """Gets the errors of this LookmlModelExplore.  # noqa: E501

        Errors  # noqa: E501

        :return: The errors of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this LookmlModelExplore.

        Errors  # noqa: E501

        :param errors: The errors of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreError]
        """

        self._errors = errors

    @property
    def fields(self):
        """Gets the fields of this LookmlModelExplore.  # noqa: E501

        Fields  # noqa: E501

        :return: The fields of this LookmlModelExplore.  # noqa: E501
        :rtype: LookmlModelExploreFieldset
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this LookmlModelExplore.

        Fields  # noqa: E501

        :param fields: The fields of this LookmlModelExplore.  # noqa: E501
        :type: LookmlModelExploreFieldset
        """

        self._fields = fields

    @property
    def joins(self):
        """Gets the joins of this LookmlModelExplore.  # noqa: E501

        Views joined into this explore  # noqa: E501

        :return: The joins of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreJoins]
        """
        return self._joins

    @joins.setter
    def joins(self, joins):
        """Sets the joins of this LookmlModelExplore.

        Views joined into this explore  # noqa: E501

        :param joins: The joins of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreJoins]
        """

        self._joins = joins

    @property
    def group_label(self):
        """Gets the group_label of this LookmlModelExplore.  # noqa: E501

        Label used to group explores in the navigation menus  # noqa: E501

        :return: The group_label of this LookmlModelExplore.  # noqa: E501
        :rtype: str
        """
        return self._group_label

    @group_label.setter
    def group_label(self, group_label):
        """Sets the group_label of this LookmlModelExplore.

        Label used to group explores in the navigation menus  # noqa: E501

        :param group_label: The group_label of this LookmlModelExplore.  # noqa: E501
        :type: str
        """

        self._group_label = group_label

    @property
    def supported_measure_types(self):
        """Gets the supported_measure_types of this LookmlModelExplore.  # noqa: E501

        An array of items describing which custom measure types are supported for creating a custom measure 'baed_on' each possible dimension type.  # noqa: E501

        :return: The supported_measure_types of this LookmlModelExplore.  # noqa: E501
        :rtype: list[LookmlModelExploreSupportedMeasureType]
        """
        return self._supported_measure_types

    @supported_measure_types.setter
    def supported_measure_types(self, supported_measure_types):
        """Sets the supported_measure_types of this LookmlModelExplore.

        An array of items describing which custom measure types are supported for creating a custom measure 'baed_on' each possible dimension type.  # noqa: E501

        :param supported_measure_types: The supported_measure_types of this LookmlModelExplore.  # noqa: E501
        :type: list[LookmlModelExploreSupportedMeasureType]
        """

        self._supported_measure_types = supported_measure_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookmlModelExplore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
