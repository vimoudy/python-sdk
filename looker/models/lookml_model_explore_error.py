# coding: utf-8

"""
    Looker API 3.0 Reference

    ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)   # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LookmlModelExploreError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'details': 'str',
        'error_pos': 'str',
        'field_error': 'bool'
    }

    attribute_map = {
        'message': 'message',
        'details': 'details',
        'error_pos': 'error_pos',
        'field_error': 'field_error'
    }

    def __init__(self, message=None, details=None, error_pos=None, field_error=None):  # noqa: E501
        """LookmlModelExploreError - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._details = None
        self._error_pos = None
        self._field_error = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if details is not None:
            self.details = details
        if error_pos is not None:
            self.error_pos = error_pos
        if field_error is not None:
            self.field_error = field_error

    @property
    def message(self):
        """Gets the message of this LookmlModelExploreError.  # noqa: E501

        Error Message  # noqa: E501

        :return: The message of this LookmlModelExploreError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LookmlModelExploreError.

        Error Message  # noqa: E501

        :param message: The message of this LookmlModelExploreError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def details(self):
        """Gets the details of this LookmlModelExploreError.  # noqa: E501

        Details  # noqa: E501

        :return: The details of this LookmlModelExploreError.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this LookmlModelExploreError.

        Details  # noqa: E501

        :param details: The details of this LookmlModelExploreError.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def error_pos(self):
        """Gets the error_pos of this LookmlModelExploreError.  # noqa: E501

        Error source location  # noqa: E501

        :return: The error_pos of this LookmlModelExploreError.  # noqa: E501
        :rtype: str
        """
        return self._error_pos

    @error_pos.setter
    def error_pos(self, error_pos):
        """Sets the error_pos of this LookmlModelExploreError.

        Error source location  # noqa: E501

        :param error_pos: The error_pos of this LookmlModelExploreError.  # noqa: E501
        :type: str
        """

        self._error_pos = error_pos

    @property
    def field_error(self):
        """Gets the field_error of this LookmlModelExploreError.  # noqa: E501

        Is this a field error  # noqa: E501

        :return: The field_error of this LookmlModelExploreError.  # noqa: E501
        :rtype: bool
        """
        return self._field_error

    @field_error.setter
    def field_error(self, field_error):
        """Sets the field_error of this LookmlModelExploreError.

        Is this a field error  # noqa: E501

        :param field_error: The field_error of this LookmlModelExploreError.  # noqa: E501
        :type: bool
        """

        self._field_error = field_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookmlModelExploreError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
